#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

# Check all required programs
# are available
_requirements() {
  _check_cmd \
    'ffmpeg'
}

# shellcheck disable=SC2034
_global_variables() {
  recording_date=""
  out_file=""
  bit_rate=""
  buffer_length=""
  recording_length=""
  encoding_delay=""
  recording_method=""
  recording_format=""
  color=""
  quiet=""
}

_ffmpeg_options_load() {
  local \
    ffmpeg_options
  ffmpeg_options="${HOME}/.config/media-tools/ffmpeg_options"
  [ -e "${ffmpeg_options}" ] && \
    source \
      "${ffmpeg_options}" || \
  true
}

_encode() {
  local \
    _in="${1}" \
    _out="${2}" \
    _delay="${3}" \
    _opts=() \
    _wip
  _opts+=(
    -i
      "${_in}"
  )
  sleep \
    "${_delay}"  
  _msg_info \
    "encoding ${_in}"
  ffmpeg \
    "${_opts[@]}" \
    "${_out}"
  rm \
    "${_in}"
}

# Add a fade to audio file
# $1: input video file
# $2: delay seconds
# $3: output video file
_audiorecord() {
  local \
    _rate="${1}" \
    _buffer="${2}" \
    _length="${3}" \
    _method="${4}" \
    _delay="${5}" \
    _format="${6}" \
    _out=(
      "${7}"
    ) \
    _recorder_opts=() \
    _recorder="" \
    _tmp_dir \
    _tmp \
    _chunks \
    _i=0 \
    _recs=()
  if [[ "${_method}" == "termux" ]]; then
    _recorder="termux-microphone-record"
    _recorder_opts+=(
      -l
        "${_buffer}"
    )
  fi
  _tmp_dir="$( \
    mktemp \
      -d)"
  _msg_info \
    "out: ${_out[*]}"
  _recorder_opts+=(
    -b
      "${_rate}"
  )
  _chunks="$(( \
    _length / _buffer ))"
  while \
    (( _i < _chunks )); do
    _run \
      "audiorecord_${_i}" \
      "${_buffer}" \
      "sync" \
      "${_recorder}" \
        "${_recorder_opts[@]}" \
        -f \
	  "${_tmp_dir}/${_i}.hq.aac"
    _run \
      "encode_${_i}" \
      "0" \
      "async" \
      _encode \
        "${_tmp_dir}/${_i}.hq.aac" \
        "${_tmp_dir}/${_i}.opus" \
	"${_delay}"
    _recs+=(
      "${_tmp_dir}/${_i}.opus"
    )
    _i="$(( \
      _i + 1))"
  done
  _i=0
  while \
    (( _i < _chunks )); do
    wait \
      "$( \
        _get_pid \
	"encode_${_i}")"
    _i="$(( \
      _i + 1))"
  done 
  sleep \
    "$(( \
      _delay + 2))"
  audiocat \
    "${_out}" \
    "${_recs[@]}"
}

_set_overrides() {
  _set_override \
    "recording" \
    "format" \
    "opus"
  _set_override \
    "recording" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "out" \
    "file" \
    "$( \
      realpath \
        "recording_$( \
	  _get \
            "recording" \
	    "date").$(_get \
                        "recording" \
		        "format")")"
  _set_override \
    "recording" \
    "method" \
    "termux"
  _set_override \
    "bit" \
    "rate" \
    "480000" # 480 Kb?
  _set_override \
    "buffer" \
    "length" \
    "60" # 60 seconds
  _set_override \
    "recording" \
    "length" \
    "$(( 2 * 60 ))" # 24 hours
  _set_override \
    "encoding" \
    "delay" \
    "2"
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "           Recording date:   $(_get "recording" "date")"
  _msg_info "         Recording format:   $(_get "recording" "format")"
  _msg_info "         Recording method:   $(_get "recording" "method")"
  _msg_info "                 Bit rate:   $(_get "bit" "rate")"
  _msg_info "            Buffer length:   $(_get "buffer" "length")"
  _msg_info "           Encoding delay:   $(_get "encoding" "delay")"
  _msg_info "                   Length:   $(_get "recording" "length")"
  _msg_info "              Output file:   $(_get "out" "file")"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Audio record

Usage:
  $(_get "app" "name")
    [options]
    (<out_file>)
  options:
     -f                   Recording format
                          Default: $(_get "recording" "format")
     -b                   Audio bitrate (for supported methods).
                          Default: $(_get "bit" "rate").
     -k                   Encoding buffer length.
                          Default: $(_get "buffer" "length").
     -l                   Length of the recording.
                          Default: $(_get "recording" "length").
     -m                   Recording method.
                          Default: $(_get "recording" "method").
     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'b:k:l:m:f:scvh?' \
    arg; do
  case \
    "${arg}" in
    b) override_bit_rate="${OPTARG}" ;;
    k) override_buffer_length="${OPTARG}" ;;
    d) override_encoding_delay="${OPTARG}" ;;
    l) override_recording_length="${OPTARG}" ;;
    m) override_recording_method="${OPTARG}" ;;
    f) override_recording_format="${OPTARG}" ;;
    s) override_out_stdout="y" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
(( $# == 1 )) && \
  out_file="${1}"
_set_overrides
_config_user_init \
  "media-tools"
_show_config
_audiorecord \
  "${bit_rate}" \
  "${buffer_length}" \
  "${recording_length}" \
  "${recording_method}" \
  "${encoding_delay}" \
  "${recording_format}" \
  "${out_file}"
