#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

# Check all required programs
# are available
_requirements() {
  _check_cmd \
    'android-recorder'
}

# shellcheck disable=SC2034
_global_variables() {
  recording_date=""
  recording_method=""
  out_stdout=""
  out_file=""
  bit_rate=""
  buffer_length=""
  recording_length=""
  scale_factor=""
  color=""
  quiet=""
}

_encode() {
  local \
    _in="${1}" \
    _out="${2}" \
    _scale="${3}" \
    _mkmedia_opts=() \
    _ytencode_opts=() \
    _scaled \
    _audiovideo
  if [[ "${quiet}" != "y" ]]; then
    _mkmedia_opts+=(
      -v
    )
  fi
  _ytencode_opts+=(
    -m
      "fake"
  )
  _msg_info \
    "encoding ${_in}"
  if [[ "${_scale}" != "1" ]]; then
    _msg_info \
      "scaling ${_in}"
    _scaled="$( \
      mktemp).mp4"
    vidscale \
      "${_in}" \
      "${_scaled}" \
      "${_scale}"
    rm \
      "${_in}"
    _in="${_scaled}"
  fi
  ytencode \
    "${_ytencode_opts[@]}" \
    "${_in}" \
    "${_out}"
  rm \
    "${_in}"
}

_method_auto_detect() {
  if [[ "$(uname -o)" == "Android" ]]; then
    echo \
      'android-recorder'
  fi
}

_android-recorder_opts(){
  _recorder="android-recorder"
  _recorder_opts+=(
    -l
      "${_buffer}"
    -b
      "${_rate}"
  )
}

# Record
# $1: input video file
# $2: recording method (android-recorder)
# $3: recording bit rate
# $4: recording buffer (180)
# $5: recording length
# $3: output video file
_record() {
  local \
    _method="${1}" \
    _rate="${2}" \
    _buffer="${3}" \
    _length="${4}" \
    _scale="${5}" \
    _delay="${6}" \
    _out="${7}" \
    _recorder_opts=() \
    _vidcat_opts=() \
    _recorder=() \
    _tmp_dir \
    _chunks \
    _i=0 \
    _vids=()
  if [[ "${quiet}" != "y" ]]; then
    _vidcat_opts+=(
      -v
    )
  fi
  if [[ "${_method}" == "auto" ]]; then
    _method="$( \
      _method_auto_detect)"
  fi
  "_${_method}_opts"
  _tmp_dir="$( \
    mktemp \
      -d)"
  _msg_info \
    "out: ${_out}"
  if [[ "${_out}" == "" ]]; then
    _msg_error \
      "why no out?" \
      1
  fi
  _chunks="$(( \
    _length / _buffer ))"
  while \
    (( _i < _chunks )); do
    _run \
      "record_${_i}" \
      "0" \
      "sync" \
      "${_recorder[@]}" \
        "${_recorder_opts[@]}" \
        "${_tmp_dir}/${_i}.mp4" || \
      true
    _vids+=(
      "${_tmp_dir}/${_i}.mp4"
    )
    _i="$(( \
      _i + 1))"
  done
  sleep \
    "$(( \
      _delay + 2))"
  vidcat \
    "${_vidcat_opts[@]}" \
    "${_out}" \
    "${_vids[@]}"
}

# Set defaults and, if present, overrides
# from program command line option parameters
_set_overrides() {
  _set_override \
    "audio" \
    "record" \
    "auto"
  _set_override \
    "recording" \
    "format" \
    "mp4"
  _set_override \
    "recording" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "recording" \
    "method" \
    "$(_method_auto_detect)"
  _set_override \
    "out" \
    "file" \
    "$( \
      realpath \
        "recording_$( \
	  _get \
            "recording" \
	    "date").$(_get \
                        "recording" \
		        "format")")"
  _set_override \
    "bit" \
    "rate" \
    "16000000" # 16 Mb?
  _set_override \
    "buffer" \
    "length" \
    "60" # 60 seconds
  _set_override \
    "recording" \
    "length" \
    "120" # "$(( 24 * 60 * 60 ))" # 24 hours
  _set_override \
    "scale" \
    "factor" \
    "1"
  _set_override \
    "out" \
    "stdout" \
    "n"
  _set_override \
    "encoding" \
    "delay" \
    "20"
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "           Recording date:   $(_get "recording" "date")"
  _msg_info "         Recording format:   $(_get "recording" "format")"
  _msg_info "             Audio record:   $(_get "audio" "record")"
  _msg_info "         Recording method:   $(_get "recording" "method")"
  _msg_info "                 Bit rate:   $(_get "bit" "rate")"
  _msg_info "            Buffer length:   $(_get "buffer" "length")"
  _msg_info "           Encoding delay:   $(_get "encoding" "delay")"
  _msg_info "         Recording length:   $(_get "recording" "length")"
  _msg_info "              Output file:   $(_get "out" "file")"
}


# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Record

Usage:
  $(_get "app" "name")
    [options]
    (<out_file>)
  options:
     -f                   Recording format
                          Default: $(_get "recording" "format")
     -m                   Recording method
                          Default: $(_get "recording" "method")
     -a                   Whether to record audio from the microphone.
                          Default: $(_get "audio" "record").
     -b                   Video bitrate.
                          Default: $(_get "bit" "rate").
     -k                   Encoding buffer length.
                          Default: $(_get "buffer" "length").
     -l                   Length of the recording.
                          Default: $(_get "recording" "length").
     -r                   Scale factor.
                          Default: $(_get "scale" "factor").
     -s                   Output to stdout.
     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'f:a:b:k:l:r:scvh?' \
    arg; do
  case \
    "${arg}" in
    m) override_recording_method="${OPTARG}" ;;
    b) override_bit_rate="${OPTARG}" ;;
    k) override_buffer_length="${OPTARG}" ;;
    l) override_recording_length="${OPTARG}" ;;
    r) override_scale_factor="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
(( $# == 1 )) && \
  out_file="${1}"
_set_overrides
app_opts=(
  "${recording_method}"
  "${bit_rate}"
  "${buffer_length}"
  "${recording_length}"
  "${scale_factor}"
  "${cat_delay}"
  "${out_file}"
)
_config_user_init \
  "record-tools"
_show_config
_record \
  "${app_opts[@]}"
