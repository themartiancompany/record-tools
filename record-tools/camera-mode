#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

_requirements() {
  local \
    _os
  _os="$( \
    uname \
      -o)"
  if [[ "${_os}" == 'Android' ]]; then
    _check_cmd \
      "activity-launch"
  fi
}

# shellcheck disable=SC2034
_global_variables() {
  mode_date=""
  input_command=""
  mode_duration=""
  poll_interval=""
  camera_app=""
  color=""
  quiet=""
}

_disable() {
  local \
    _duration="${1}" \
    _app="${2}"
    _cmd=()
  _cmd=(
    "mv"
    "${_device}"
    "${_device}.disabled"
  )
  su \
    -c \
    "${_cmd[*]}"
}

_start() {
  local \
    _device="${1}" \
    _cmd=() \
    _conf
  _cmd=(
    "mv"
    "${_device}.disabled"
    "${_device}"
  )
  _conf="$( \
    _get_conf_path)"
  write_setting \
    "${_conf}" \
    "camera" \
    "mode" \
    "active"
  _set="$( \
    read_setting \
      "${_conf}" \
      "camera" \
      "mode")"
  # su \
  #   -c \
  #   "${_cmd[*]}"
}

_status() {
  local \
    _duration="${1}" \
    _poll="${2}" \
    _app="${3}" \
    _status \
    _conf
  _conf="$( \
    _get_conf_path)"
  _status="$( \
    _read_setting \
      "${_conf}" \
      "mode" \
      "status")"
  echo \
    "${_status}"
}

_service() {
  local \
    _duration="${1}" \
    _poll="${2}" \
    _app="${3}" \
    _camera_app_opts=() \
    _touchctl_opts=() \
    _time=0 \
    _brightness
  if [[ "quiet" != "y" ]]; then
    _touchctl_opts+=(
      -v
    )
    _camera_app_opts+=(
      -v
    )
  fi
  while \
    (( "${_time}" < "${_duration}" )); do
    _brightness="$( \
      bbrightnessctl \
        -m \
          root \
        get || \
        true)"
    _msg_info \
      "Current brightness: ${_brightness}"
    if \
      (( "1" <= "${_brightness}" )); then
      activity-launch \
        "${_camera_app_opts[@]}" \
        "${_app}" \
        "MainActivity" || \
        true
      bbrightnessctl \
        -m \
          root \
        set \
          0 || \
        true
    fi
    if \
      [[ "$(touchctl \
              status)" == "enabled" ]]; then
      touchctl \
        "${_touchctl_opts[@]}" \
        disable || \
      true
    fi
    sleep \
      "${_poll}"
    _time="$(( \
      _time + _poll ))"
  done
  if \
    [[ "$(touchctl \
            status)" == "disabled" ]]; then
    touchctl \
      "${_touchctl_opts[@]}" \
      enable || \
    true
  fi
}

_auto_detect_method() {
  local \
    _os \
    _method
  _os="$( \
    uname \
      -o)"
  if [[ "${_os}" == "Android" ]]; then
    _method="root"
    if [[ "$(command \
               -v \
               "su")" ]]; then
      _method="root"
    fi
  fi
  echo \
    "${_method}"
}

_camera_mode() {
  local \
    _cmd="${1}" \
    _duration="${2}" \
    _app="${3}" \
    _poll="${4}" \
    _cmd_opts=() \
    _opts=() \
    _conf
  shift \
    4
  _opts=(
    "$@"
  )
  _conf="$( \
    _get_conf_path)"
  # _a="$( \
  #     _read_settings \
  #       "${_conf}" \
  #       "${_host}" \
  #       "port")"
  # 'net.sourceforge.opencamera' 'MainActivity'
  if [[ "${_cmd}" == "service" ]]; then
    _cmd_opts+=(
      "${_duration}"
      "${_poll}"
      "${_app}"
    )
  fi
  "_${_cmd}" \
    "${_cmd_opts[@]}" \
    "${_opts[*]}"
}

_camera_app_auto_detect() {
  local \
    _os
  _os="$( \
    uname \
      -o)"
  if [[ "${_os}" == 'Android' ]]; then
    echo \
      'net.sourceforge.opencamera'
  fi
}

_get_conf_path() {
  local \
    _dir \
    _conf
  _dir="${HOME}/.config/media-tools"
  _conf="${_dir}/$( \
    _get \
      "app" \
      "name").cfg"
  echo \
    "${_conf}"
}

_set_overrides() {
  _set_override \
    "mode" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "mode" \
    "duration" \
    "$(( 60 * 60 ))" # 1 hour
    # "$(( 60 * 60 * 24 ))" # 24 hours
  _set_override \
    "camera" \
    "app" \
    "$(_camera_app_auto_detect)"
  _set_override \
    "poll" \
    "interval" \
    "30"
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "         Mode change date:   $(_get "mode" "date")"
  _msg_info "            Input command:   $(_get "input" "command")"
  _msg_info "            Poll interval:   $(_get "poll" "interval")"
  _msg_info "      Camera app interval:   $(_get "camera" "app")"
  _msg_info "            Mode duration:   $(_get "mode" "duration")"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Camera device mode

Usage:
  $(_get "app" "name")
    [options]
    <command>
  commands:
    start
    disable
    status
  options:
     -t                   Camera mode duration in seconds.
			  Default: $(_get "mode" "duration")
     -a                   Camera app.
			  Default: $(_get "camera" "app")
     -p                   Poll interval for brightness reset
                          in seconds.
			  Default: $(_get "poll" "interval")
     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    't:a:p:cvh?' \
    arg; do
  case \
    "${arg}" in
    t) override_mode_duration="${OPTARG}" ;;
    a) override_camera_app="${OPTARG}" ;;
    p) override_poll_interval="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
(( $# < 1 )) && \
  _set_overrides && \
  _usage \
    1
_set \
  "input" \
  "command" \
  "${1}"
_set_overrides
_config_user_init \
  "record-media-tools"
app_opts=(
  "$(_get \
       "input" \
       "command")"
  "$(_get \
       "mode" \
       "duration")"
  "$(_get \
       "camera" \
       "app")"
  "$(_get \
       "poll" \
       "interval")"
)
_show_config
_camera_mode \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
